<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions/>
  <description>Default</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPOSITORY_URL</name>
          <defaultValue>${GITEA_REPOSITORY_URL}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REGISTRY_URL</name>
          <defaultValue>${REGISTRY_URL}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.7">
          <name>MASTER_NODE</name>
          <randomName>choice-parameter-1814974920334375</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>def swarmNode=&quot;${SWARM_MASTER_DEPLOY_NODE}&quot;
return [swarmNode+&quot;:selected:disabled&quot;]</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <choiceType>PT_RADIO</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.5.7">
          <name>SCRIPTS_PATH</name>
          <randomName>choice-parameter-17811179254275507</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>import javax.net.ssl.*;
import java.io.IOException;
import org.apache.http.conn.ssl.*;
import java.security.KeyStoreException;
import org.apache.http.util.EntityUtils;
import java.security.KeyManagementException;
import org.apache.http.ssl.SSLContextBuilder;
import java.security.NoSuchAlgorithmException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;


def uri = new URI(&quot;${REPOSITORY_URL}&quot;)
def temp = uri.getPath().split(&quot;/&quot;).takeRight(2)
def project = temp[0]
def repos = temp[1].replaceAll(&quot;.git&quot;,&quot;&quot;)
def addr = getAddr(uri,true)

try  {
    def endpoint = addr +&apos;/api/v1/repos/&apos; + project + &apos;/&apos; + repos + &apos;/contents&apos;
    def httpclient = createAcceptCrt()
    def httpget = new HttpGet(endpoint)
    def response = httpclient.execute(httpget)
    def entity = response.getEntity()
    def result = EntityUtils.toString(entity)
    def json =  jsonParse(result)
    def dirs = []
    dirs.add(&quot;/:selected&quot;)
    json.each{ val -&gt;
        if (val.type == &apos;dir&apos;){
            dirs.add(val.name.toString())
        }
    }
    return dirs
} catch (NoSuchAlgorithmException | KeyStoreException | KeyManagementException | IOException e) {
    throw new RuntimeException(e)
}

def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
def getAddr(uri,schema){
    def matches = (uri =~ &quot;^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?&quot;)
    def addr = &quot;&quot;
    if (schema){
        addr = matches[0].getAt(2)+&quot;://&quot; + matches[0].getAt(3)
    }else{
        addr = matches[0].getAt(3)
    }
    if (matches[0].getAt(4).toString() != &quot;null&quot; ){
        addr = addr + matches[0].getAt(4)
    }
    return addr
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>REPOSITORY_URL</referencedParameters>
          <choiceType>PT_RADIO</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.5.7">
          <name>PROFILE_TYPE</name>
          <randomName>choice-parameter-17871621078460940</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>import javax.net.ssl.*;
import java.io.IOException;
import org.apache.http.conn.ssl.*;
import java.security.KeyStoreException;
import org.apache.http.util.EntityUtils;
import java.security.KeyManagementException;
import org.apache.http.ssl.SSLContextBuilder;
import java.security.NoSuchAlgorithmException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;

def uri = new URI(&quot;${REPOSITORY_URL}&quot;)
def temp = uri.getPath().split(&quot;/&quot;).takeRight(2)
def project = temp[0]
def repos = temp[1].replaceAll(&quot;.git&quot;,&quot;&quot;)
def addr = getAddr(uri,true)

try  {
    def endpoint = addr +&apos;/api/v1/repos/&apos; + project + &apos;/&apos; + repos + &quot;/contents/${SCRIPTS_PATH}&quot;
    def httpclient = createAcceptCrt()
    def httpget = new HttpGet(endpoint)
    def response = httpclient.execute(httpget)
    def entity = response.getEntity()
    def result = EntityUtils.toString(entity)
    def json =  jsonParse(result)
    def profileType = []
    def csvSelect = false
    json.each{ tree -&gt;
        def matcher = (tree.name.toString() =~ /[^\.]*$/)
        switch (matcher[0]){
        case &quot;csv&quot; : 
            profileType.add(&quot;csv:selected&quot;)
            csvSelect = true                   
        }
    }
    if (!csvSelect){
        profileType.add(&quot;custom:selected&quot;)
    }else{
        profileType.add(&quot;custom&quot;)
    }
    return profileType
} catch (NoSuchAlgorithmException | KeyStoreException | KeyManagementException | IOException e) {
    throw new RuntimeException(e)
}
def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
def getAddr(uri,schema){
    def matches = (uri =~ &quot;^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?&quot;)
    def addr = &quot;&quot;
    if (schema){
        addr = matches[0].getAt(2)+&quot;://&quot; + matches[0].getAt(3)
    }else{
        addr = matches[0].getAt(3)
    }
    if (matches[0].getAt(4).toString() != &quot;null&quot; ){
        addr = addr + matches[0].getAt(4)
    }
    return addr
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>REPOSITORY_URL,SCRIPTS_PATH</referencedParameters>
          <choiceType>PT_RADIO</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.5.7">
          <name>SCRIPTS</name>
          <randomName>choice-parameter-17813169741520262</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>import javax.net.ssl.*;
import java.io.IOException;
import org.apache.http.conn.ssl.*;
import java.security.KeyStoreException;
import org.apache.http.util.EntityUtils;
import java.security.KeyManagementException;
import org.apache.http.ssl.SSLContextBuilder;
import java.security.NoSuchAlgorithmException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;

def uri = new URI(&quot;${REPOSITORY_URL}&quot;)
def temp = uri.getPath().split(&quot;/&quot;).takeRight(2)
def project = temp[0]
def repos = temp[1].replaceAll(&quot;.git&quot;,&quot;&quot;)
def addr = getAddr(uri,true)

try  {
    def endpoint = addr +&quot;/api/v1/repos/&quot; + project + &apos;/&apos; + repos + &apos;/contents&apos; + &apos;/&apos; + &quot;${SCRIPTS_PATH}&quot;
    def httpclient = createAcceptCrt()
    def httpget = new HttpGet(endpoint)
    def response = httpclient.execute(httpget)
    def entity = response.getEntity()
    def result = EntityUtils.toString(entity)
    def json =  jsonParse(result)
    def scripts = []
    json.each{ tree -&gt;
        def matcher = (tree.name.toString() =~ /[^\.]*$/)
        switch (matcher[0]){
        case &quot;jmx&quot; : 
            scripts.add(tree.name.toString()+&quot;:selected&quot;)
        }
    }
    if (scripts.size()==0){
        scripts.add(&quot;scripts_not_found:disabled&quot;)
    }
    return scripts
} catch (NoSuchAlgorithmException | KeyStoreException | KeyManagementException | IOException e) {
    throw new RuntimeException(e)
}

def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
def getAddr(uri,schema){
    def matches = (uri =~ &quot;^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?&quot;)
    def addr = &quot;&quot;
    if (schema){
        addr = matches[0].getAt(2)+&quot;://&quot; + matches[0].getAt(3)
    }else{
        addr = matches[0].getAt(3)
    }
    if (matches[0].getAt(4).toString() != &quot;null&quot; ){
        addr = addr + matches[0].getAt(4)
    }
    return addr
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>REPOSITORY_URL,SCRIPTS_PATH,PROFILE_TYPE</referencedParameters>
          <choiceType>PT_CHECKBOX</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@2.5.7">
          <name>PROFILE</name>
          <randomName>choice-parameter-17872808550265764</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>import javax.net.ssl.*;
import java.io.IOException;
import org.yaml.snakeyaml.Yaml;
import org.apache.http.conn.ssl.*;
import java.security.KeyStoreException;
import org.apache.http.util.EntityUtils;
import java.security.KeyManagementException;
import org.apache.http.ssl.SSLContextBuilder;
import java.security.NoSuchAlgorithmException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;

def uri = new URI(&quot;${REPOSITORY_URL}&quot;)
def temp = uri.getPath().split(&quot;/&quot;).takeRight(2)
def project = temp[0]
def repos = temp[1].replaceAll(&quot;.git&quot;,&quot;&quot;)
def addr = getAddr(uri,true)

def style =&apos;&lt;head&gt;&lt;style&gt;table.bus {font-family: arial, sans-serif;border-collapse: collapse;width: 100%;}td, th {border: 1px solid #dddddd;text-align: center;padding: 8px;}tr:nth-child(even) {background-color: #dddddd;}&lt;/style&gt;&lt;/head&gt;&apos;
def foo = &apos;&lt;table class=&quot;bus&quot;&gt;&apos;
def bar = &apos;&lt;/table&gt;&apos;
def buf_result = style &lt;&lt; foo
buf_result &lt;&lt; &apos;&lt;tr&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;Scenario&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;TPS&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;SLA&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;Rump-Up Time&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;Rump-Up Steps Count&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;Test Duration&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;Replicas&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;CPU&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;th&gt;MEM&lt;/th&gt;&apos;
buf_result &lt;&lt; &apos;&lt;/tr&gt;&apos;

switch (&quot;${PROFILE_TYPE}&quot;){
    case &quot;csv&quot;:
        def endpoint = addr + &quot;/api/v1/repos/&quot; + project + &apos;/&apos; + repos + &apos;/contents&apos; + &quot;/${SCRIPTS_PATH}/profile.csv&quot;
        buf_result  &lt;&lt; getCSVTable(endpoint) &lt;&lt; bar
        break
    case &quot;custom&quot;:
        buf_result &lt;&lt; getCustomTable() &lt;&lt; bar
        break
}
def getCSVTable(endpoint){
    def scripts = []
    &quot;${SCRIPTS}&quot;.split(&quot;,&quot;).each { scenario -&gt;
        scripts.add(scenario.replaceAll(~/\.[^\.]+$/, &apos;&apos;).toLowerCase())
    }
    def temp_buf = &quot;&quot; &lt;&lt; &quot;&quot;
    def base64 = getBase64Profile(endpoint)
    def raw = new String(base64.decodeBase64())
    def rows = raw.split(&quot;\n&quot;)
    def profiles = [:]
    def iter =0 
    def heads = []
    rows.each{
        def data = it.split(&apos;,&apos;)
        if (iter==0){
            data.each{ val -&gt;
                heads.add(val)
        }
        iter++
        }else{
            def i = 0
            def profile = [:]
            def name = data[0].toLowerCase()
            heads.each{ head -&gt;
                profile.&quot;${head}&quot; = data[i]
                i++
            }
            profile.Replicas = data[data.size()-1]
            profile.CPU = &quot;1&quot;
            profile.MEM = &apos;1500M&apos;
            profiles.&quot;${name}&quot; = profile
        }
    }
    scripts.each{script -&gt; 
        if (script != &quot;&quot;){
            def isPresent = profiles.&quot;${script}&quot;
            if (isPresent != null){
                profiles.each{key,val -&gt;
                    if (script == key){
                        temp_buf &lt;&lt; &apos;&lt;tr&gt;&apos;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&quot; &lt;&lt; val.Scenario &lt;&lt; &quot;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=&quot; &lt;&lt; val.TPS &lt;&lt; &quot;&gt;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=&quot; &lt;&lt; val.SLA &lt;&lt; &quot;&gt;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=&quot; &lt;&lt; val.RumpUpTime &lt;&lt; &quot;&gt;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=&quot; &lt;&lt; val.RumpUPSteps &lt;&lt; &quot;&gt;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=&quot; &lt;&lt; val.TestDuration &lt;&lt; &quot;&gt;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=&quot; &lt;&lt; val.Replicas &lt;&lt; &quot;&gt;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&quot; &lt;&lt; val.CPU &lt;&lt; &quot;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &quot;&lt;td&gt;&quot; &lt;&lt; val.MEM &lt;&lt; &quot;&lt;/td&gt;&quot;
                        temp_buf &lt;&lt; &apos;&lt;/tr&gt;&apos;
                    }
                }
            }else{
                temp_buf &lt;&lt; &apos;&lt;tr&gt;&apos;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&quot; &lt;&lt; &quot;${script}&quot; &lt;&lt; &quot;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;1&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &quot;&lt;td&gt;2000M&lt;/td&gt;&quot;
                temp_buf &lt;&lt; &apos;&lt;/tr&gt;&apos;
            }
        }
    }
    return temp_buf
}
def getCustomTable(endpoint){
    def scripts = []
    &quot;${SCRIPTS}&quot;.split(&quot;,&quot;).each { scenario -&gt;
        scripts.add(scenario.replaceAll(~/\.[^\.]+$/, &apos;&apos;).toLowerCase())
    }
    def temp_buf = &quot;&quot; &lt;&lt; &quot;&quot;
    scripts.each{script -&gt; 
        if (script != &quot;&quot;){
            temp_buf &lt;&lt; &apos;&lt;tr&gt;&apos;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&quot; &lt;&lt; &quot;${script}&quot; &lt;&lt; &quot;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;&lt;input name=&apos;value&apos; style=&apos;text-align:center&apos;  type=&apos;text&apos; size=&apos;7&apos; value=empty&gt;&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;1&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &quot;&lt;td&gt;2000M&lt;/td&gt;&quot;
            temp_buf &lt;&lt; &apos;&lt;/tr&gt;&apos;
        }
    }
    return temp_buf
}

def getBase64Profile(endpoint){
    def httpclient = createAcceptCrt()
    def httpget = new HttpGet(endpoint)
    def response = httpclient.execute(httpget)
    def entity = response.getEntity()
    def result = EntityUtils.toString(entity)
    def json =  jsonParse(result)
    return json.content.toString()
}


def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
def getAddr(uri,schema){
    def matches = (uri =~ &quot;^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?&quot;)
    def addr = &quot;&quot;
    if (schema){
        addr = matches[0].getAt(2)+&quot;://&quot; + matches[0].getAt(3)
    }else{
        addr = matches[0].getAt(3)
    }
    if (matches[0].getAt(4).toString() != &quot;null&quot; ){
        println &quot; NOT NILL&quot;
        addr = addr + matches[0].getAt(4)
    }
    return addr
}
</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>REPOSITORY_URL,SCRIPTS_PATH,SCRIPTS,PROFILE_TYPE</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.5.7">
          <name>JMETER_BASE_VERSION</name>
          <randomName>choice-parameter-17873361723067929</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>def getTags() {
    def tags = []
    def endpoint = REGISTRY_URL + &quot;/v2/jmeter_base/tags/list&quot;
    def conn = new URL(endpoint).openConnection()
    def response = new groovy.json.JsonSlurper().parseText(conn.content.text)
    def i =0
    response.tags.each {
        if (i == 0){
                 tags.add(it + &apos;:selected&apos;)
                 i++
        }else{ 
                 tags.add(it)
        } 
    }
    return tags
}
return getTags()</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>REGISTRY_URL</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <hudson.model.TextParameterDefinition>
          <name>TEST_DESCRIPTION</name>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DELAYED_START</name>
          <description>delayed start time (in minutes)</description>
          <defaultValue>0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@2.5.7">
          <name>STATUS</name>
          <randomName>choice-parameter-1540802440928735</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>def status = true
def ok = &apos;&lt;p&gt;&lt;font size=&quot;7&quot; color=&quot;#07a307&quot;&gt;&lt;center&gt;OK: Ready to launch&lt;/center&gt;&lt;/font&gt;&lt;/p&gt;&apos;
def fails = new StringBuilder()
fails  &lt;&lt; &apos;&lt;p&gt;&lt;font size=&quot;7&quot; color=&quot;#a30f07&quot;&gt;&lt;center&gt;Fail: &lt;/center&gt;&lt;/font&gt;&lt;/p&gt;&apos;
if(&quot;${REPOSITORY_URL}&quot; == &quot;&quot;){
    fails  &lt;&lt; &apos;&lt;p&gt;&lt;font size=&quot;5&quot; color=&quot;#a30f07&quot;&gt;Repository URL is empty&lt;/font&gt;&lt;/p&gt;&apos;
    status = false
}
if(&quot;${REGISTRY_URL}&quot; == &quot;&quot;){
    fails  &lt;&lt; &apos;&lt;p&gt;&lt;font size=&quot;5&quot; color=&quot;#a30f07&quot;&gt;Registry URL is empty&lt;/font&gt;&lt;/p&gt;&apos;
    status = false
}
if(&quot;${SCRIPTS}&quot;.size() == 0){
    fails  &lt;&lt; &apos;&lt;p&gt;&lt;font size=&quot;5&quot; color=&quot;#a30f07&quot;&gt;Scripts not selected&lt;/font&gt;&lt;/p&gt;&apos;
    status = false
}
def scripts =[]
&quot;${SCRIPTS}&quot;.split(&quot;,&quot;).each { script -&gt;
    scripts.add(script)
}
def profiles =[]
&quot;${PROFILE}&quot;.split(&quot;,&quot;).each { profile -&gt;
    profiles.add(profile.toLowerCase())
}
Integer iter = 0
Integer cnt = profiles.size()/scripts.size()
scripts.each { script -&gt;
    println script
    for(int i in 0..5) {
        println profiles[iter+i]
        if (profiles[iter+i] == &quot;empty&quot;){
            fails  &lt;&lt; &apos;&lt;p&gt;&lt;font size=&quot;5&quot; color=&quot;#a30f07&quot;&gt;&apos; &lt;&lt; script &lt;&lt;&apos;: one or more parameters is empty&lt;/font&gt;&lt;/p&gt;&apos;
            status = false
            break
        }

    }
    iter = iter + cnt
}


if(status){
    return ok
}else{
    return fails
}


</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>JmeterDeploy_Gitea</projectName>
          <projectFullName>JmeterDeploy_Gitea</projectFullName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>REPOSITORY_URL,REGISTRY_URL,SCRIPTS,PROFILE</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>
import javax.net.ssl.*;
import java.sql.Timestamp;
import java.io.IOException;
import org.yaml.snakeyaml.Yaml;
import java.text.SimpleDateFormat;
import org.apache.http.conn.ssl.*;
import java.security.KeyStoreException;
import org.apache.http.util.EntityUtils;
import org.apache.http.entity.StringEntity;
import java.security.KeyManagementException;
import org.apache.http.ssl.SSLContextBuilder;
import java.security.NoSuchAlgorithmException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;

node {
    def scripts = []
    def profiles = []
    def scenarios = []
    def remote = [:]
    def buildDir = "/opt/swarmfs/builder/" + "${BUILD_ID}"
    def confluenceData = [:]
    Long TestDuration = 0
    def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
    def startTime =''
    def endTime = ''
    def uri = new URI("${REPOSITORY_URL}")
    def temp = uri.getPath().split("/").takeRight(2)
    def project = temp[0]
    def repos = temp[1].replaceAll(".git","")
    Long delayed = "${DELAYED_START}".toLong() * 60
    stage('Delayed start'){
        println "Delayed start: ${DELAYED_START} minutes"
        sleep("${delayed}")
    }
    stage('Pre-configure') {
        withCredentials([usernamePassword(credentialsId: 'docker_swarm', usernameVariable: 'USERNAME',passwordVariable: 'PASSWORD')]) {
            println "Set  remote credential"
            remote.name = "docker_swarm"
            remote.host = "${MASTER_NODE}"
            remote.user = "$USERNAME"
            remote.port = 9022
            remote.replica = 1
            remote.password = "$PASSWORD"
            remote.allowAnyHosts = true
        }
        println "Add scripts"
        "${SCRIPTS}".split(",").each { script ->
            scripts.add(script)
        }
        println "Add profiles"
        "${PROFILE}".split(",").each { profile ->
            profiles.add(profile.toLowerCase())
        }
        println "Preparation scenario"
        Integer iter = 0
        Integer cnt = profiles.size()/scripts.size()
        def allScriptDuration=[]
        scripts.each { script ->
            def scenario =[:]
            scenario.Scenario = script
            scenario.TPS = profiles[iter+0].toFloat()
            scenario.SLA = profiles[iter+1].toFloat()
            scenario.RumpUpTime = profiles[iter+2].toInteger()
            scenario.RumpUPSteps = profiles[iter+3].toInteger()
            scenario.TestDuration = profiles[iter+4].toInteger()
            allScriptDuration.add(profiles[iter+4].toLong() * 60)
            scenario.Replicas = profiles[iter+5].toInteger()
            scenario.CPU = "1"
            scenario.MEM = "2000M"
            scenario.Port = 80 // If nead appent ro ingress, use GetRandomPort("${MASTER_NODE}") and -p param in compose
            scenario.ServiceName = script.replaceAll(~/\.[^\.]+$/, '').toLowerCase()
            scenario.BuildDir = "${buildDir}/${SCRIPTS_PATH}"
            println "generate compose"
            scenario.Compose = GenerateCompose(scenario)
            scenarios.add(scenario)
            iter = iter + cnt
        }
        TestDuration = allScriptDuration.max()
        println "Pre-configure complited"
    }

    stage("Global choice"){
        try{
            stage('Create temp dir') {
                CreateBuildDir(remote,buildDir)
            }
            stage('Clone repo'){
                CloneRepo(remote,buildDir)
            }
            stage('Dockerfile'){
                def endpoint =getAddr(uri,true)
                if ("${SCRIPTS_PATH}" == "/"){
                    endpoint = endpoint +"/api/v1/repos/" << project << '/' << repos << '/contents' << '/pom.xml'
                }else{
                    endpoint = endpoint +"/api/v1/repos/" << project << '/' << repos << '/contents' << '/' << "${SCRIPTS_PATH}" << '/pom.xml'
                }
                def isCustomPOM = false
                def result = GetFile(endpoint.toString())
                println "Check pom.xml"
                if (result.toString() != "null"){
                    println "Use custom pom.xml"
                    isCustomPOM = true
                }
                endpoint =getAddr(uri,true)
                if ("${SCRIPTS_PATH}" == "/"){
                    endpoint = endpoint +"/api/v1/repos/" << project << '/' << repos << '/contents' << '/Dockerfile'
                }else{
                    endpoint = endpoint +"/api/v1/repos/" << project << '/' << repos << '/contents' << '/' << "${SCRIPTS_PATH}" << '/Dockerfile'
                }
                result = GetFile(endpoint.toString())
                if (result.toString() != "null"){
                    println "Use custom dockerfile"
                    def text = new String(result.decodeBase64())
                    CreateDockerFile(remote,buildDir,text)
                }else{
                    println "Use default dockerfile"
                    CreateDockerFile(remote,buildDir,GenerateDockerFile(isCustomPOM))
                }
            }
            stage('Build and push'){
                def runners = [:]
                scenarios.each{ scenario ->
                    writeFile file: "${WORKSPACE}/${BUILD_ID}/${scenario.ServiceName}.yml", text: scenario.Compose
                    sshPut remote: remote, from: "${WORKSPACE}/${BUILD_ID}/${scenario.ServiceName}.yml", into: "${scenario.BuildDir}/${scenario.ServiceName}.yml"
                    runners[scenario.ServiceName] = { Build(remote,scenario) }
                }
                parallel runners
            }
            stage('Deploy service'){
                def runners = [:]
                scenarios.each{ scenario ->
                     runners[scenario.ServiceName] = { Deploy(remote,scenario) }
                }
                parallel runners
            }
            stage('Running') {
                println "Scenario runner "
                println "Duration : "+TestDuration
                def start = new Date()
                startTime = sdf.format(start)
                sleep(TestDuration)
            } 
        }catch(Exception ex){
            println ex
            currentBuild.result = "FAILURE"
        }finally{
            stage('Undeploy') {
                def runners = [:]
                    scenarios.each{ scenario ->
                        runners[scenario.ServiceName] = { UnDeploy(remote,scenario) }
                    }
                parallel runners
                println "docker stack rm complited"
                def end = new Date()
                endTime = sdf.format(end)
            } 
            stage('Cleaning') {
                cmd = "rm -rf " << buildDir
                sshCommand remote: remote, command: cmd.toString()
                deleteDir()
                println "temp dir removed"
            }
            stage('Insert test info'){
                PushRun(startTime,endTime,scenarios)
            }
        }
    }
}

def CreateBuildDir(remote,buildDir){
    def cmd = "mkdir " << buildDir
    sshCommand remote: remote, command: cmd.toString()
    println "dir "<< buildDir << " created"
}
def CloneRepo(remote,buildDir){
    def cmd = "git clone -c http.sslVerify=false ${REPOSITORY_URL} " << buildDir
    sshCommand remote: remote, command: cmd.toString()
    println "Clone  ${REPOSITORY_URL} complited"
}

def Build(remote,scenario){
    registry = getAddr("${REGISTRY_URL}",false)
    def cmd =  "cd " << scenario.BuildDir <<  " && docker build  -t "<< registry <<"/" << scenario.ServiceName << " --build-arg script=" << scenario.Scenario << " --build-arg imagetag=" << "${JMETER_BASE_VERSION}" << " " <<  scenario.BuildDir
    sshCommand remote: remote, command: cmd.toString()
    println "docker build complited"
    cmd = "docker push " << registry <<"/" << scenario.ServiceName
    sshCommand remote: remote, command: cmd.toString()
    println "docker push complited"
}

def Deploy(remote,scenario){
    println "Service deploy"
    cmd = "cd " << scenario.BuildDir << " &&  docker stack deploy  --compose-file " << scenario.ServiceName << ".yml " << scenario.ServiceName
    sshCommand remote: remote, command: cmd.toString()
    println "docker stack deploy complited"
}

def GetRandomPort(master){ 
    while(true){
        def port = (int)(Math.random() * ((12000 - 11000) + 1)) + 11000
        def endpoint = "http://" << master << ":" << port << "/metrics"
        println endpoint
        def get = new URL(endpoint.toString()).openConnection()
        try {
            get.setRequestMethod("GET");
            get.connect();
            println "port is use"
        }catch(Exception e){
            println "Exception "+ e 
            return port
        }
    }
}

def GenerateCompose(scenario){
    def TPS = (int)(scenario.TPS / scenario.Replicas).round(0)
    def TARGET = (int)((scenario.TPS * scenario.SLA) / scenario.Replicas).round(0)
    def STEP = (int)(TPS / scenario.RumpUPSteps)
    def STEPTIME = scenario.RumpUpTime / scenario.RumpUPSteps + "m"
    def DURATION = scenario.TestDuration + "m"
    if (STEP == 0 ){
        STEP = 1
    }
    def TESTNAME =""
    if ("${SCRIPTS_PATH}" == "/"){
        TESTNAME ="${Global}"
    }else{
        TESTNAME ="${SCRIPTS_PATH}"
    }
    def COMMAND = "mvn verify -DrunId=${BUILD_ID} -Dthreads=${TARGET} -DtestName=${TESTNAME} -DexporterPort=${scenario.Port} -Dduration=${scenario.TestDuration} -D \"load_profile=step(1,${TPS},${STEP},${STEPTIME}) const(${TPS},${DURATION})\""
    println COMMAND
    registry = getAddr("${REGISTRY_URL}",false)
    def compose = new StringBuffer()
    compose << "version: '3.3'\nnetworks:\n    jmeter_net:\n        external: true\nservices:\n    jmeter:\n        image: " << registry << "/${scenario.ServiceName}\n"
    //compose << "        ports:\n            - ${scenario.Port}:${scenario.Port}\n        command: '${COMMAND}'\n"
    compose << "        command: '${COMMAND}'\n"
    compose << "        networks:\n            - jmeter_net\n        deploy:\n            replicas: ${scenario.Replicas}\n            resources:\n                limits:\n"
    compose << "                    cpus: '${scenario.CPU}'\n                    memory: '${scenario.MEM}'\n            placement:\n                constraints: [node.role != manager]\n"
    compose << "        labels:\n            org.label-schema.group: 'jmeter'"
    println compose.toString()
    return compose.toString()
}

def UnDeploy(remote,scenario){
    sshCommand remote: remote, command:"docker stack rm ${scenario.ServiceName}"
    println "Scenario ${scenario.ServiceName} stoped"
}

def PushRun(startTime,endTime,scenarios){
    try{
        def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
        Date time = sdf.parse(startTime)
        Timestamp timestamp = new Timestamp(time.getTime())
        def startTimestamp = timestamp.getTime()
        time = sdf.parse(endTime)
        timestamp = new Timestamp(time.getTime())
        def endTimestamp = timestamp.getTime()
        def scns=[]
        scenarios.each { val ->
            def s = groovy.json.JsonOutput.toJson(
                name: val.ServiceName, 
                tps: val.TPS as int, 
                sla: val.SLA as int,
                duration:val.TestDuration as int
            )
        scns.add(s)
        }
        def sc = jsonParse(scns.toString())
        def data = groovy.json.JsonOutput.toJson(
            project: "${SCRIPTS_PATH}", 
            grafanalink: "http://172.27.193.132:3000/d/In_The_Bus/test_overview?orgId=1&refresh=10s&from=${startTimestamp}&to=${endTimestamp}", 
            description: "${TEST_DESCRIPTION}",
            scenarios:sc
        )
        def dt = jsonParse(data)
        def message = groovy.json.JsonOutput.toJson(id: "${BUILD_NUMBER}" as int , starttime: startTimestamp, endtime: endTimestamp, data:dt)
        println("Put message")
        println(message)
        def endpoint = "http://pkles-gt0002950.solution.gt:8090/api/v1/runs/new"
        def httpClient = createAcceptCrt()
        def httppost = new HttpPost(endpoint)
        httppost.setEntity(new StringEntity(message.toString()))
        def response = httpClient.execute(httppost)
        println response.getProtocolVersion()    
        println response.getStatusLine().getStatusCode()
        println response.getStatusLine().getReasonPhrase() 
        println response.getStatusLine().toString()
        def entity = response.getEntity()
        if (entity != null) {
            def result = EntityUtils.toString(entity)
            println result
        }
        println "Push run code: "+response.getStatusLine().getStatusCode()
    }catch(Exception e){
        println "Exception "+ e 
    }
}

def GenerateDockerFile(isCustomPOM){
    def registry = getAddr("${REGISTRY_URL}",false)
    def dockerfile = new StringBuffer()
    dockerfile << 'ARG imagetag\n'
    dockerfile << 'FROM ' << registry <<'/jmeter_base:$imagetag\n'
    dockerfile << 'ENV	JMETER_HOME	/opt/jmeter\n'
    dockerfile << 'WORKDIR $JMETER_HOME\n'
    dockerfile << 'ARG script\n'
    if (isCustomPOM){
       dockerfile << 'COPY pom.xml $JMETER_HOME/\n'
    }
    dockerfile << 'COPY $script $JMETER_HOME/src/test/jmeter/\n'
    return dockerfile.toString()
}

def GetFile(endpoint){
    try {
        def httpclient = createAcceptCrt()
        def httpget = new HttpGet(endpoint)
        def response = httpclient.execute(httpget)
        def entity = response.getEntity()
        def result = EntityUtils.toString(entity)
        def json =  jsonParse(result)
        return json.content.toString()
    }catch(Exception e){
        println "Exception "+ e 
        return "FileNotFound"
    }
}


def CreateDockerFile(remote,buildDir, text){
    println text
    writeFile file: "${WORKSPACE}/${BUILD_ID}/Dockerfile", text: text
    sshPut remote: remote, from: "${WORKSPACE}/${BUILD_ID}/Dockerfile", into: "${buildDir}/${SCRIPTS_PATH}/Dockerfile"
}


def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}
def getAddr(uri,schema){
    def matches = (uri =~ "^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?")
    def addr = ""
    if (schema){
        addr = matches[0].getAt(2)+"://" + matches[0].getAt(3)
    }else{
        addr = matches[0].getAt(3)
    }
    if (matches[0].getAt(4).toString() != "null" ){
        addr = addr + matches[0].getAt(4)
    }
    return addr
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>