import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.*;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import javax.net.ssl.*;
import java.io.IOException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import jenkins.model.*;
import org.apache.http.client.utils.URIBuilder;

def style ='<head><style>table.bus {font-family: arial, sans-serif;border-collapse: collapse;width: 100%;}td, th {border: 1px solid #dddddd;text-align: center;padding: 8px;}tr:nth-child(even) {background-color: #dddddd;}</style></head>'
def foo = '<table class="bus">'
def bar = '</table>'
def buf_result = style << foo
buf_result << '<tr>'
buf_result << '<th>Scenario</th>'
buf_result << '<th>TPS</th>'
buf_result << '<th>SLA</th>'
buf_result << '<th>Rump-Up Time</th>'
buf_result << '<th>Rump-Up Steps Count</th>'
buf_result << '<th>Test Duration</th>'
buf_result << '<th>Replicas</th>'
buf_result << '<th>CPU</th>'
buf_result << '<th>MEM</th>'
buf_result << '</tr>'
def HttpClients = createAcceptCrt()
def endpoint = "${RUN_ADAPTER_URL}" + "/api/v1/profiles/"
def httpGet = new HttpGet(endpoint)
URI uri = new URIBuilder(httpGet.getURI())
    .addParameter("space", "${PROJECT}")
    .addParameter("project", "${SYSTEM}")
    .addParameter("release", "${RELEASE}")
    .addParameter("version", "${VERSION}".split(",")[0])
    .addParameter("testtype", "${TEST_TYPE}")
    .build();
httpGet.setURI(uri)
def response = HttpClients.execute(httpGet)
def entity = response.getEntity()
def result = EntityUtils.toString(entity)
def json =  jsonParse(result)
if (json.status == "error"){
    buf_result  << getDefaultTable() << bar
}else{
    buf_result  << getTable(json) << bar
}
def getDefaultTable(){
    def scripts = []
    "${SCRIPTS}".split(",").each { scenario ->
        scripts.add(scenario.replaceAll(~/\.[^\.]+$/, '').toLowerCase())
    }
    def temp_buf = "" << ""
    scripts.each { script ->
        temp_buf << '<tr>'
        temp_buf << "<td>" << script << "</td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
        temp_buf << '</tr>'
    }
    return temp_buf
}

def getTable(json){
    def scripts = []
    "${SCRIPTS}".split(",").each { scenario ->
        scripts.add(scenario.replaceAll(~/\.[^\.]+$/, '').toLowerCase())
    }
    def temp_buf = "" << ""
    scripts.each { script ->
        def isNotExist = true
        for(def profile : json.data){
            if (script==profile.name){
                temp_buf << '<tr>'
                temp_buf << "<td>" << profile.name << "</td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.tps << "></td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.sla << "></td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.rump_up_time << "></td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.rump_up_steps_count << "></td>"                    
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.test_duration << "></td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.replicas << "></td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.cpu << "></td>"
                temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=" << profile.memory << "></td>"
                temp_buf << '</tr>'
                isNotExist = false
                break
            }
        }
        if (isNotExist){
            temp_buf << '<tr>'
            temp_buf << "<td>" << script << "</td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << "<td><input name='value' style='text-align:center'  type='text' size='7' value=-></td>"
            temp_buf << '</tr>'
        }
    }
    return temp_buf
}
return buf_result
def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}