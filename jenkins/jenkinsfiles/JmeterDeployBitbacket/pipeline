import javax.net.ssl.*;
import java.sql.Timestamp;
import java.io.IOException;
import org.yaml.snakeyaml.Yaml;
import java.text.SimpleDateFormat;
import org.apache.http.conn.ssl.*;
import java.security.KeyStoreException;
import org.apache.http.util.EntityUtils;
import org.apache.http.entity.StringEntity;
import java.security.KeyManagementException;
import org.apache.http.ssl.SSLContextBuilder;
import java.security.NoSuchAlgorithmException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;

node {
    def runUUID = ""
    def scripts = []
    def profiles = []
    def scenarios = []
    def remote = [:]
    def buildDir = "/opt/swarmfs/builder/" + "${BUILD_ID}"
    def confluenceData = [:]
    Long TestDuration = 0
    def sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
    def startTime =''
    def endTime = ''
    def uri = new URI("${REPOSITORY_URL}")
    def temp = uri.getPath().split("/").takeRight(2)
    def project = temp[0]
    def repos = temp[1].replaceAll(".git","")
    Long delayed = "${DELAYED_START}".toLong() * 60
    stage('Delayed start'){
        println "Delayed start: ${DELAYED_START} minutes"
        sleep("${delayed}")
    }
    stage('Pre-configure') {
        withCredentials([usernamePassword(credentialsId: 'docker_swarm', usernameVariable: 'USERNAME',passwordVariable: 'PASSWORD')]) {
            println "Set  remote credential"
            remote.name = "docker_swarm"
            remote.host = "${SWARM_MASTER_NODE}"
            remote.user = "$USERNAME"
            remote.port = "${SWARM_MASTER_NODE_SSHPORT}".toInteger()
            remote.replica = 1
            remote.password = "$PASSWORD"
            remote.allowAnyHosts = true
        }
        println "Add scripts"
        "${SCRIPTS}".split(",").each { script ->
            scripts.add(script)
        }
        println "Add profiles"
        "${PROFILE}".split(",").each { profile ->
            profiles.add(profile.toLowerCase())
        }
        println "Preparation scenario"
        Integer iter = 0
        Integer cnt = profiles.size()/scripts.size()
        def allScriptDuration=[]
        scripts.each { script ->
            def scenario =[:]
            scenario.Scenario = script
            scenario.TPS = profiles[iter+0].toFloat()
            scenario.SLA = profiles[iter+1].toFloat()
            scenario.RumpUpTime = profiles[iter+2].toInteger()
            scenario.RumpUPSteps = profiles[iter+3].toInteger()
            scenario.TestDuration = profiles[iter+4].toInteger()
            allScriptDuration.add(profiles[iter+4].toLong() * 60)
            scenario.Replicas = profiles[iter+5].toInteger()
            scenario.CPU = profiles[iter+6].toInteger()
            scenario.MEM = profiles[iter+7].toInteger()
            scenario.Port =  80 // If need append to ingress, use GetRandomPort("${SWARM_MASTER_NODE}") and -p in compose 
            scenario.ServiceName = script.replaceAll(~/\.[^\.]+$/, '').toLowerCase()
            scenario.BuildDir = "${buildDir}/${SCRIPTS_PATH}"
            println "generate compose"
            scenario.Compose = GenerateCompose(scenario)
            scenarios.add(scenario)
            iter = iter + cnt
        }
        TestDuration = allScriptDuration.max()
        println "Pre-configure complited"
    }

    stage("Global choice"){
        try{
            stage('Create temp dir') {
                CreateBuildDir(remote,buildDir)
            }
            stage('Clone repo'){
                CloneRepo(remote,buildDir)
            }
            stage('Dockerfile'){
                def endpoint =getAddr(uri,true)
                if ("${SCRIPTS_PATH}" == "/"){
                    endpoint = endpoint + "/bitbucket/rest/api/1.0/projects/"+project+"/repos/"+repos+"/raw/pom.xml"
                }else{
                    endpoint = endpoint + "/bitbucket/rest/api/1.0/projects/"+project+"/repos/"+repos+"/raw/${SCRIPTS_PATH}/pom.xml"
                }
                def isCustomPOM = false
                def result = GetFile(endpoint.toString())
                println "Check pom.xml"
                if (result.toString() != "FileNotFound"){
                    println "Use custom pom.xml"
                    isCustomPOM = true
                }
                endpoint =getAddr(uri,true)
                if ("${SCRIPTS_PATH}" == "/"){
                    endpoint = endpoint + "/bitbucket/rest/api/1.0/projects/"+project+"/repos/"+repos+"/raw/Dockerfile"
                }else{
                    endpoint = endpoint + "/bitbucket/rest/api/1.0/projects/"+project+"/repos/"+repos+"/raw/${SCRIPTS_PATH}/Dockerfile"
                }
                result = GetFile(endpoint.toString())
                if (result.toString() != "FileNotFound"){
                    println "Use custom dockerfile"
                    def text = new String(result.decodeBase64())
                    CreateDockerFile(remote,buildDir,text)
                }else{
                    println "Use default dockerfile"
                    CreateDockerFile(remote,buildDir,GenerateDockerFile(isCustomPOM))
                }
            }
            stage('Build and push'){
                def runners = [:]
                scenarios.each{ scenario ->
                    writeFile file: "${WORKSPACE}/${BUILD_ID}/${scenario.ServiceName}.yml", text: scenario.Compose
                    sshPut remote: remote, from: "${WORKSPACE}/${BUILD_ID}/${scenario.ServiceName}.yml", into: "${scenario.BuildDir}/${scenario.ServiceName}.yml"
                    runners[scenario.ServiceName] = { Build(remote,scenario) }
                }
                parallel runners
            }
            stage('Deploy service'){
                def runners = [:]
                scenarios.each{ scenario ->
                     runners[scenario.ServiceName] = { Deploy(remote,scenario) }
                }
                parallel runners
            }
            stage ('Push Profiles Data'){
                PushProfilesData(scenarios)
            }
            stage ('Push Runs Data'){
                def json = PushRunsData(scenarios)
                def res = jsonParse(json)
                runUUID = res.id
            }
            stage('Running') {
                println "Scenario runner "
                println "Duration : "+TestDuration
                def start = new Date()
                startTime = sdf.format(start)
                sleep(TestDuration)
            } 
        }catch(Exception ex){
            println ex
            currentBuild.result = "FAILURE"
        }finally{
            stage('Undeploy') {
                def runners = [:]
                    scenarios.each{ scenario ->
                        runners[scenario.ServiceName] = { UnDeploy(remote,scenario) }
                    }
                parallel runners
                println "docker stack rm complited"
            } 
            stage('Set end time'){
                SetEndTime(runUUID)
            }
            stage('Cleaning') {
                cmd = "rm -rf " << buildDir
                sshCommand remote: remote, command: cmd.toString()
                deleteDir()
                println "temp dir removed"
            }
        }
    }
}

def CreateBuildDir(remote,buildDir){
    def cmd = "mkdir " << buildDir
    sshCommand remote: remote, command: cmd.toString()
    println "dir "<< buildDir << " created"
}
def CloneRepo(remote,buildDir){
    def cmd = "git clone -c http.sslVerify=false --single-branch --branch "<< "${RELEASE}" <<" "<< getBitbacketPrivateAddr("${REPOSITORY_URL}") << " " << buildDir
    sshCommand remote: remote, command: cmd.toString()
    println "Clone  ${REPOSITORY_URL} complited"
}

def Build(remote,scenario){
    registry = getAddr("${DOCKER_REGISTRY_URL}",false)
    def cmd =  "cd " << scenario.BuildDir <<  " && docker build  -t "<< registry <<"/" << scenario.ServiceName << " --build-arg script=" << scenario.Scenario << " --build-arg imagetag=" << "${JMETER_BASE_VERSION}" << " " <<  scenario.BuildDir
    sshCommand remote: remote, command: cmd.toString()
    println "docker build complited"
    cmd = "docker push " << registry <<"/" << scenario.ServiceName
    sshCommand remote: remote, command: cmd.toString()
    println "docker push complited"
}

def Deploy(remote,scenario){
    println "Service deploy"
    cmd = "cd " << scenario.BuildDir << " &&  docker stack deploy  --compose-file " << scenario.ServiceName << ".yml " << scenario.ServiceName
    sshCommand remote: remote, command: cmd.toString()
    println "docker stack deploy complited"
}

def GetRandomPort(master){ 
    while(true){
        def port = (int)(Math.random() * ((12000 - 11000) + 1)) + 11000
        def endpoint = "http://" << master << ":" << port << "/metrics"
        println endpoint
        def get = new URL(endpoint.toString()).openConnection()
        try {
            get.setRequestMethod("GET");
            get.connect();
            println "port is use"
        }catch(Exception e){
            println "Exception "+ e 
            return port
        }
    }
}

def GenerateCompose(scenario){
    def TPS = (int)(scenario.TPS / scenario.Replicas).round(0)
    if (TPS == 0 ){
        TPS = 1
    }
    def TARGET = (int)((scenario.TPS * scenario.SLA) / scenario.Replicas).round(0)
    if (TARGET == 0 ){
        TARGET = 1
    }
    def STEP = (int)(TPS / scenario.RumpUPSteps)
    if (STEP == 0 ){
        STEP = 1
    }
    def STEPTIME = scenario.RumpUpTime / scenario.RumpUPSteps 
    if (STEPTIME == 0 ){
        STEPTIME = 1
    }
    STEPTIME = STEPTIME + "m"
    def DURATION = scenario.TestDuration
    if (DURATION == 0 ){
        DURATION = 1
    }
    DURATION = DURATION + "m"
    def RUN_ID = "${LAST_RUN_ID}".toInteger() + 1
    def COMMAND = "mvn verify -DrunId=${RUN_ID} -Dthreads=${TARGET} -DprojectName=${PROJECT} -DtestName=${SYSTEM} -DexporterPort=${scenario.Port} -Dduration=${scenario.TestDuration} -D \"load_profile=step(1,${TPS},${STEP},${STEPTIME}) const(${TPS},${DURATION})\""
    registry = getAddr("${DOCKER_REGISTRY_URL}",false)
    def compose = new StringBuffer()
    compose << "version: '3.3'\nnetworks:\n    jmeter_net:\n        external: true\nservices:\n    jmeter:\n        image: " << registry << "/${scenario.ServiceName}\n"
    //compose << "        ports:\n            - ${scenario.Port}:${scenario.Port}\n        command: '${COMMAND}'\n"
    compose << "        command: '${COMMAND}'\n"
    compose << "        networks:\n            - jmeter_net\n        deploy:\n            replicas: ${scenario.Replicas}\n            resources:\n                limits:\n"
    compose << "                    cpus: '${scenario.CPU}'\n                    memory: '${scenario.MEM}M'\n            placement:\n                constraints: [node.role != manager]\n"
    compose << "        labels:\n            org.label-schema.group: 'jmeter'"
    println "Generate compose:"
    println compose.toString()
    return compose.toString()
}

def UnDeploy(remote,scenario){
    sshCommand remote: remote, command:"docker stack rm ${scenario.ServiceName}"
    println "Scenario ${scenario.ServiceName} stoped"
}

def PushProfilesData(scenarios){
    try{
        def endpoint = "${RUN_ADAPTER_URL}/api/v1/profiles"
        def ver =  ""
        "${VERSION}".split(",").each { version ->
            ver = version
        }
        scenarios.each { val ->
            def p = 
                groovy.json.JsonOutput.toJson(
                name: val.ServiceName,
                space_name: "${PROJECT}",
                project_name: "${SYSTEM}",
                release_name: "${RELEASE}",
                version_name: ver,
                testtype_name: "${TEST_TYPE}",
                tps: val.TPS as int, 
                sla: val.SLA as float,
                rump_up_time: val.RumpUpTime,
                rump_up_steps_count: val.RumpUPSteps,
                test_duration: val.TestDuration as int,
                replicas: val.Replicas,
                cpu:  val.CPU,
                memory:  val.MEM 
            )
            println "Put profile " + p
            return SendPost(endpoint,p)
        }
    }catch(Exception e){
        println "Exception "+ e 
    }
}

def PushRunsData(scenarios){
    try{
        def ver =  ""
        "${VERSION}".split(",").each { version ->
            ver = version
        }
        def endpoint = "${RUN_ADAPTER_URL}/api/v1/runs/"
        def start = new Date()
        def sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
        startTime = sdf.format(start)
        def RUN_ID = "${LAST_RUN_ID}".toInteger() + 1
        def scns=[]
        scenarios.each { val ->
            def s = groovy.json.JsonOutput.toJson(
                name: val.ServiceName, 
                tps: val.TPS as int, 
                sla: val.SLA as int,
                duration: val.TestDuration as int
            )
            scns.add(s)
        }
        println "PushRunsData  - add scenarios "+scns
        def sc = jsonParse(scns.toString())
        def data = groovy.json.JsonOutput.toJson(
            //grafanalink: "${GRAFANA_URL}/d/lQusa8Tnz/jmeter-test-overview?orgId=1&refresh=10s&from=${startTimestamp}&to=${endTimestamp}", 
            description: "${TEST_DESCRIPTION}",
            scenarios:sc
        )
        def dt = jsonParse(data)
       
        def message = groovy.json.JsonOutput.toJson(
            run_id: RUN_ID,
            space_name: "${PROJECT}",
            project_name: "${SYSTEM}",
            release_name: "${RELEASE}",
            version_name: ver,
            testtype_name: "${TEST_TYPE}",
            start_time: startTime,
            data:dt
        )
        println "Put message "+ message
        return SendPost(endpoint,message)
    }catch(Exception e){
        println "Exception "+ e 
    }
}

def SetEndTime(runUUID){
    def end = new Date()
    def sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX")
    endTime = sdf.format(end)
    def endpoint = "${RUN_ADAPTER_URL}/api/v1/runs/setendtime"
    // Date time = sdf.parse(endTime)
    // Timestamp timestamp = new Timestamp(time.getTime())
    // def endTimestamp = timestamp.getTime()
    def httpClient = createAcceptCrt()
    def httpPost = new HttpPost(endpoint)
    URI uri = new URIBuilder(httpPost.getURI())
        .addParameter("id", runUUID)
        .addParameter("endtime", endTime)
        .build();
    httpPost.setURI(uri)
    def response = httpClient.execute(httpPost)
    def entity = response.getEntity()
    return EntityUtils.toString(entity)
}

def SendPost(endpoint,message){
    def httpClient = createAcceptCrt()
    def httppost = new HttpPost(endpoint)
    httppost.setEntity(new StringEntity(message.toString()))
    def response = httpClient.execute(httppost)
    println response.getProtocolVersion()    
    println response.getStatusLine().getStatusCode()
    println response.getStatusLine().getReasonPhrase() 
    println response.getStatusLine().toString()
    println response.getEntity()
    def entity = response.getEntity()
    return EntityUtils.toString(entity)
}

def GenerateDockerFile(isCustomPOM){
    def registry = getAddr("${DOCKER_REGISTRY_URL}",false)
    def dockerfile = new StringBuffer()
    dockerfile << 'ARG imagetag\n'
    dockerfile << 'FROM ' << registry <<'/jmeter_base:$imagetag\n'
    dockerfile << 'ENV	JMETER_HOME	/opt/jmeter\n'
    dockerfile << 'WORKDIR $JMETER_HOME\n'
    dockerfile << 'ARG script\n'
    if (isCustomPOM){
       dockerfile << 'COPY pom.xml $JMETER_HOME/\n'
    }
    dockerfile << 'COPY $script $JMETER_HOME/src/test/jmeter/\n'
    println "Generate dockerfile "
    println dockerfile.toString()
    return dockerfile.toString()
}

def GetFile(endpoint){
    try {
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
            com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class, Jenkins.instance, null, null ).find{
            it.id ==  'bitbucket_user'}
        def USERNAME = creds.username
        def PASSWORD = creds.password
        def httpclient = createAcceptCrt()
        def httpget = new HttpGet(endpoint)
        httpget.addHeader("Authorization", "Basic "+"${USERNAME}:${PASSWORD}".bytes.encodeBase64().toString());
        def response = httpclient.execute(httpget)
        println "code " + response.getStatusLine().getStatusCode()
        if (response.getStatusLine().getStatusCode()==404){
            return "FileNotFound"
        }else{
            def entity = response.getEntity()
            return EntityUtils.toString(entity)
        }
    }catch(Exception e){
        println "Exception "+ e 
        return "FileNotFound"
    }
}

def CreateDockerFile(remote,buildDir, text){
    println text
    writeFile file: "${WORKSPACE}/${BUILD_ID}/Dockerfile", text: text
    sshPut remote: remote, from: "${WORKSPACE}/${BUILD_ID}/Dockerfile", into: "${buildDir}/${SCRIPTS_PATH}/Dockerfile"
}

def createAcceptCrt() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
    SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
    HostnameVerifier allowAllHosts = new NoopHostnameVerifier();
    SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
    return HttpClients.custom().setSSLSocketFactory(connectionFactory).build();
}

def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}

def getAddr(uri,schema){
    def matches = (uri =~ "^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?")
    def addr = ""
    if (schema){
        addr = matches[0].getAt(2)+"://" + matches[0].getAt(3)
    }else{
        addr = matches[0].getAt(3)
    }
    if (matches[0].getAt(4).toString() != "null" ){
        addr = addr + matches[0].getAt(4)
    }
    return addr
}

def getBitbacketPrivateAddr(uri){
    def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class, Jenkins.instance, null, null ).find{
    it.id ==  'bitbucket_token'}
    def USERNAME = creds.username
    def TOKEN = creds.password
    def matches = (uri =~ "^((http[s]?):\\/)?\\/?([^:\\/\\s]+)(:([^\\/]*))?(.*)")
    def addr = matches[0].getAt(2)+"://"+ USERNAME +":"+ TOKEN +"@"+ matches[0].getAt(3)
    if (matches[0].getAt(4).toString() != "null" ){
        addr = addr + matches[0].getAt(4)
    }
    addr = addr + matches[0].getAt(6)
    return addr
}